/** @jsx ForgeUI.createElement */
import ForgeUI, { useConfig } from './';
import { isForgeElement, } from './types';
import { useProductContext } from './';
export const Button = 'Button';
export const ButtonSet = 'ButtonSet';
export const Text = 'Text';
export const Image = 'Image';
export const Checkbox = 'Checkbox';
export const CheckboxGroup = 'CheckboxGroup';
export const DatePicker = 'DatePicker';
export const ErrorPanel = 'ErrorPanel';
export const Fragment = 'Fragment';
export const Cell = 'Cell';
export const Head = 'Head';
export const Row = 'Row';
export const Table = 'Table';
export const Form = 'Form';
export const TextArea = 'TextArea';
export const TextField = 'TextField';
export const Option = 'Option';
export const UserPicker = 'UserPicker';
export const Select = 'Select';
export const ThreeLOPrompt = 'ThreeLOPrompt';
export const Radio = 'Radio';
export const RadioGroup = 'RadioGroup';
const ConfigFormPrimitive = 'ConfigForm';
const childrenMap = (children, fn) => {
    if (Array.isArray(children)) {
        return children.map(child => !Array.isArray(child) && isForgeElement(child) ? fn(child) : child);
    }
    return isForgeElement(children) ? fn(children) : children;
};
export const ConfigForm = (props) => {
    const config = useConfig() || {};
    const setConfigValues = (elems) => childrenMap(elems, (child) => {
        if (child.type === Select &&
            Object.keys(config).includes(child.props.name)) {
            return {
                ...child,
                props: {
                    ...child.props,
                    children: childrenMap(child.props.children, option => 
                    // This is required as we need to handle single and multi select components
                    []
                        .concat(config[child.props.name] || [])
                        .includes(option.props.value)
                        ? {
                            ...option,
                            props: { ...option.props, defaultSelected: true },
                        }
                        : option),
                },
            };
        }
        else if (child.type === RadioGroup &&
            Object.keys(config).includes(child.props.name)) {
            return {
                ...child,
                props: {
                    ...child.props,
                    children: childrenMap(child.props.children, option => option.props.value === config[child.props.name]
                        ? {
                            ...option,
                            props: { ...option.props, defaultChecked: true },
                        }
                        : option),
                },
            };
        }
        else if (child.type === CheckboxGroup &&
            Object.keys(config).includes(child.props.name)) {
            return {
                ...child,
                props: {
                    ...child.props,
                    children: childrenMap(child.props.children, option => (config[child.props.name] || []).includes(option.props.value)
                        ? {
                            ...option,
                            props: { ...option.props, defaultChecked: true },
                        }
                        : option),
                },
            };
        }
        else if ((child.type === TextField ||
            child.type === TextArea ||
            child.type === UserPicker ||
            child.type === DatePicker) &&
            Object.keys(config).includes(child.props.name)) {
            return {
                ...child,
                props: {
                    ...child.props,
                    defaultValue: config[child.props.name],
                },
            };
        }
        else if (child.type === Form) {
            return child;
        }
        return {
            ...child,
            props: {
                ...child.props,
                children: setConfigValues(child.props.children),
            },
        };
    });
    return ForgeUI.createElement(Fragment, null, setConfigValues(props.children));
};
export const Macro = (props) => {
    const { isConfig } = useProductContext();
    return (ForgeUI.createElement(Fragment, null,
        props.app,
        isConfig && ForgeUI.createElement(ConfigFormPrimitive, null, props.config)));
};
