import { Forge, ForgeElement, RenderState, JsxTextProps } from './types';
interface Hook {
    type: 'async' | 'action';
    value: any;
}
export interface AuxFiber<P = {
    [p: string]: any;
}> {
    children: AuxFiber[];
    element: ForgeElement<P>;
    hooks: Hook[];
    currentHookIndex: number;
    key: string;
}
export declare const isTextElement: (element: ForgeElement<any>) => element is ForgeElement<JsxTextProps>;
export declare const processAuxElement: (element: ForgeElement<Record<string, any>>) => Promise<AuxFiber<{
    [p: string]: any;
}>>;
export declare const getAuxFromFiber: (fiber: AuxFiber<{
    [p: string]: any;
}>) => Forge[];
export declare const getStateFromFiber: <P>(fiber: AuxFiber<P>) => RenderState;
export {};
