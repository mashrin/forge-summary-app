"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const types_1 = require("./types");
const components_1 = require("./components");
const reconcilerState_1 = tslib_1.__importDefault(require("./reconcilerState"));
const markdown_1 = require("./markdown");
exports.isTextElement = (element) => element.type === 'Text';
const flatMap = (fn, items) => items.reduce((bs, a) => bs.concat(fn(a)), []);
const asyncMap = async (fn, items) => {
    const results = [];
    for (const x of items) {
        const result = await fn(x);
        results.push(result);
    }
    return results;
};
const _processAuxElement = (getUniqueName) => async (element) => {
    const { __auxId, ...props } = element.props;
    if (typeof element.type === 'string') {
        const key = getUniqueName(`${__auxId || element.type}`);
        const currentEffect = reconcilerState_1.default.currentEffect;
        if (currentEffect &&
            types_1.isEventEffect(currentEffect) &&
            key === currentEffect.handler.componentKey) {
            reconcilerState_1.default.enableSideEffectsQueue();
            await element.props[currentEffect.handler.prop](...currentEffect.args);
            reconcilerState_1.default.disableSideEffectsQueue();
        }
        return {
            element,
            key,
            hooks: [],
            currentHookIndex: 0,
            children: await asyncMap(_processAuxElement(getUniqueName), element.props.children.filter(types_1.isForgeElement)),
        };
    }
    else if (element.type === components_1.Macro) {
        if (!reconcilerState_1.default.config) {
            // set default config if no config exists
            reconcilerState_1.default.config = element.props.defaultConfig;
        }
    }
    // function component
    reconcilerState_1.default.wipFiber = {
        element,
        key: getUniqueName(`${__auxId || element.type.name}`),
        hooks: [],
        currentHookIndex: 0,
        children: [],
    };
    let children = undefined;
    while (children === undefined) {
        try {
            children = element.type(props);
        }
        catch (e) {
            if (e instanceof Promise) {
                await e;
            }
            else {
                throw e;
            }
        }
    }
    const fiber = {
        ...reconcilerState_1.default.wipFiber,
        currentHookIndex: 0,
    };
    reconcilerState_1.default.clearWipFiber();
    return {
        ...fiber,
        children: await asyncMap(_processAuxElement(getUniqueName), children ? [children] : []),
    };
};
exports.processAuxElement = async (element) => {
    const visitedElements = {};
    const getUniqueName = name => {
        if (typeof visitedElements[name] === 'undefined') {
            visitedElements[name] = 0;
        }
        else {
            visitedElements[name]++;
        }
        return `${name}.${visitedElements[name]}`;
    };
    return _processAuxElement(getUniqueName)(element);
};
const overrideHandlers = (type, key) => {
    if (type === 'Button') {
        return {
            onClick: {
                componentKey: key,
                prop: 'onClick',
            },
        };
    }
    else if (type === 'Form') {
        return {
            onSubmit: {
                componentKey: key,
                prop: 'onSubmit',
            },
        };
    }
    return {};
};
exports.getAuxFromFiber = (fiber) => {
    const { element, key, children } = fiber;
    /** Transform markdown to ADF
     * @see https://product-fabric.atlassian.net/wiki/spaces/AUX/pages/959122884/AUX+RFC-7+Text+rendering+pipeline
     */
    if (exports.isTextElement(element) &&
        typeof element.type === 'string' &&
        (element.props.format === undefined || element.props.format === 'markdown')) {
        let props;
        try {
            props = {
                format: 'adf',
                content: markdown_1.md2Adf(element.props.content),
            };
        }
        catch (err) {
            props = {
                format: 'plaintext',
                content: `Error parsing markdown\n${err}`,
            };
        }
        return [
            {
                type: element.type,
                children: [],
                key,
                props,
            },
        ];
    }
    else if (element.type === 'ConfigForm') {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const { children: _, ...props } = element.props;
        return [
            {
                children: flatMap(exports.getAuxFromFiber, children),
                key,
                props,
                type: element.type,
            },
        ];
    }
    else if (element.type === 'Fragment') {
        return flatMap(exports.getAuxFromFiber, children);
    }
    else if (typeof element.type === 'string') {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const { children: _, ...props } = element.props;
        return [
            {
                children: flatMap(exports.getAuxFromFiber, children),
                key,
                props: {
                    ...props,
                    ...overrideHandlers(element.type, fiber.key),
                },
                type: element.type,
            },
        ];
    }
    // function component
    return flatMap(exports.getAuxFromFiber, children);
};
exports.getStateFromFiber = (fiber) => {
    let state = {};
    if (fiber.hooks.some(hook => hook.type === 'action')) {
        state = {
            [fiber.key]: fiber.hooks.reduce((map, hook, hookIndex) => {
                if (hook.type === 'action') {
                    map[hookIndex] = hook.value;
                }
                return map;
            }, {}),
        };
    }
    fiber.children.forEach(child => {
        state = { ...state, ...exports.getStateFromFiber(child) };
    });
    return state;
};
