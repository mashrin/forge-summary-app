import { TableSideEffectHandler } from './table';
import { RowsSideEffectHandler } from './rows';
var SideEffectsHandler = /** @class */ (function () {
    function SideEffectsHandler(sideEffects) {
        this.table = new TableSideEffectHandler(sideEffects && sideEffects.table);
        this.rows = new RowsSideEffectHandler(sideEffects && sideEffects.rows);
    }
    SideEffectsHandler.prototype.getTableMap = function (isDelete) {
        return this.table.getTableMap(isDelete);
    };
    SideEffectsHandler.prototype.map = function (mapping) {
        var sideEffects = {};
        var tableSideEffect = this.table.map(mapping);
        var rowsSideEffect = this.rows.map(mapping);
        if (tableSideEffect) {
            sideEffects.table = tableSideEffect;
        }
        if (rowsSideEffect) {
            sideEffects.rows = rowsSideEffect;
        }
        return sideEffects;
    };
    SideEffectsHandler.prototype.invert = function (originalDoc, isDelete, map) {
        var sideEffects = {};
        var tableSideEffect = this.table.invert(originalDoc);
        if (tableSideEffect) {
            sideEffects.table = tableSideEffect;
        }
        var rowsSideEffect = this.rows.invert(originalDoc, isDelete, map);
        if (rowsSideEffect) {
            sideEffects.rows = rowsSideEffect;
        }
        return sideEffects;
    };
    SideEffectsHandler.prototype.toJSON = function () {
        var tableSideEffectJson = this.table.toJSON();
        var rowsSideEffectJson = this.rows.toJSON();
        if (!tableSideEffectJson && !rowsSideEffectJson) {
            return;
        }
        var sideEffectsJSON = {};
        if (tableSideEffectJson) {
            sideEffectsJSON.table = tableSideEffectJson;
        }
        if (rowsSideEffectJson) {
            sideEffectsJSON.rows = rowsSideEffectJson;
        }
        return sideEffectsJSON;
    };
    SideEffectsHandler.fromJSON = function (schema, json) {
        var sideEffects = {};
        if (json.table) {
            sideEffects.table = TableSideEffectHandler.fromJSON(schema, json.table);
        }
        if (json.rows) {
            sideEffects.rows = RowsSideEffectHandler.fromJSON(schema, json.rows);
        }
        return sideEffects;
    };
    return SideEffectsHandler;
}());
export { SideEffectsHandler };
//# sourceMappingURL=side-effects.js.map