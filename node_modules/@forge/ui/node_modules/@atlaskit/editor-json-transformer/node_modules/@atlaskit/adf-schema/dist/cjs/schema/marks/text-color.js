"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var groups_1 = require("../groups");
var colors_1 = require("../../utils/colors");
var colorArrayPalette = [
    // default row
    // [N800, default],
    [colors_1.N80, 'Light gray'],
    [colors_1.P300, 'Purple'],
    [colors_1.T300, 'Teal'],
    [colors_1.G300, 'Green'],
    [colors_1.R300, 'Red'],
    [colors_1.Y400, 'Orange'],
];
// ED-8368: used for A/B testing of text color picker
var colorArrayPaletteExperimental = [
    // default row - first color is added programatically
    // [N800, 'Squid ink'], // default dark gray
    [colors_1.B100, 'Blue'],
    [colors_1.T300, 'Teal'],
    [colors_1.G300, 'Green'],
    [colors_1.Y200, 'Yellow'],
    [colors_1.R300, 'Red'],
    [colors_1.P300, 'Purple'],
    // row 2
    [colors_1.N80, 'Light gray'],
    [colors_1.B500, 'Dark blue'],
    [colors_1.T500, 'Dark teal'],
    [colors_1.G500, 'Dark green'],
    [colors_1.Y400, 'Orange'],
    [colors_1.R500, 'Dark red'],
    [colors_1.P500, 'Dark purple'],
    // row 3
    [colors_1.N0, 'White'],
    [colors_1.B75, 'Light blue'],
    [colors_1.T75, 'Light teal'],
    [colors_1.G75, 'Light green'],
    [colors_1.Y75, 'Light yellow'],
    [colors_1.R75, 'Light red'],
    [colors_1.P50, 'Light purple'],
];
// @see https://product-fabric.atlassian.net/wiki/spaces/E/pages/55979455/Colour+picker+decisions#Colourpickerdecisions-Visualdesigndecisions
exports.colorPalette = new Map();
exports.colorPaletteExperimental = new Map();
colorArrayPalette.forEach(function (_a) {
    var _b = tslib_1.__read(_a, 2), color = _b[0], label = _b[1];
    return exports.colorPalette.set(color.toLowerCase(), label);
});
colorArrayPaletteExperimental.forEach(function (_a) {
    var _b = tslib_1.__read(_a, 2), color = _b[0], label = _b[1];
    return exports.colorPaletteExperimental.set(color.toLowerCase(), label);
});
exports.textColor = {
    attrs: { color: {} },
    inclusive: true,
    group: groups_1.COLOR,
    parseDOM: [
        {
            style: 'color',
            getAttrs: function (maybeValue) {
                var value = maybeValue;
                var hexColor;
                if (value.match(/^rgb/i)) {
                    hexColor = colors_1.rgbToHex(value);
                }
                else if (value[0] === '#') {
                    hexColor = value.toLowerCase();
                }
                // else handle other colour formats
                return hexColor &&
                    (exports.colorPalette.has(hexColor) || exports.colorPaletteExperimental.has(hexColor))
                    ? { color: hexColor }
                    : false;
            },
        },
    ],
    toDOM: function (mark) {
        return [
            'span',
            {
                style: "color: " + mark.attrs.color,
            },
        ];
    },
};
//# sourceMappingURL=text-color.js.map