"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var prosemirror_tables_1 = require("prosemirror-tables");
var table_map_1 = require("./table-map");
/**
 * Helper to have a consistent way to iterate for all the cells in a column.
 * You can skip rows by passing the rows to skipped in the next arguments.
 * For example: `iter.next(1)` to skip the next row
 * @param rect
 * @param col
 */
function cellsAtColumn(rect, col) {
    var map, tableStart, table, refColumn, row, index, pos, hasMergedCells, type, cell, cellInfo, skippedRows;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                map = rect.map, tableStart = rect.tableStart, table = rect.table;
                refColumn = col > 0 ? -1 : 0;
                if (prosemirror_tables_1.columnIsHeader(map, table, col + refColumn))
                    refColumn = col === 0 || col === map.width ? null : 0;
                row = 0;
                _a.label = 1;
            case 1:
                if (!(row < map.height)) return [3 /*break*/, 4];
                index = table_map_1.getCellIndex(rect.map, row, col);
                pos = map.map[index];
                hasMergedCells = table_map_1.hasMergedColumns(rect.map, row, col) && table_map_1.isRootRow(rect.map, row, col);
                type = refColumn == null
                    ? prosemirror_tables_1.tableNodeTypes(table.type.schema).cell
                    : table.nodeAt(map.map[index + refColumn]).type;
                if (!hasMergedCells) {
                    pos = map.positionAt(row, col, table);
                }
                cell = table.nodeAt(pos);
                cellInfo = {
                    from: tableStart + pos,
                    to: tableStart + pos,
                    row: row,
                    col: hasMergedCells ? map.colCount(pos) : col,
                    type: type,
                    hasMergedCells: hasMergedCells,
                };
                if (cell) {
                    cellInfo.attrs = cell.attrs;
                    cellInfo.to = tableStart + pos + cell.nodeSize;
                }
                return [4 /*yield*/, cellInfo];
            case 2:
                skippedRows = _a.sent();
                if (skippedRows && skippedRows > 0) {
                    row += skippedRows;
                }
                _a.label = 3;
            case 3:
                row++;
                return [3 /*break*/, 1];
            case 4: return [2 /*return*/];
        }
    });
}
exports.cellsAtColumn = cellsAtColumn;
//# sourceMappingURL=cells-at-column.js.map